import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
import argparse
import random


class Node:
    """
    Represents a node in a network.
        value (float): The initial opinion value of the node, set randomly.
        index (int): The unique index of the node within the network.
        connections (list): List of indices representing connections to other nodes.
    """

    def __init__(self, value, index):
        self.value = value
        self.index = index
        self.connections = []


class Network:
    """
    Represents a network of nodes.
        nodes (list): A list of Node objects.
        size (int): The number of nodes in the network.
        node_colors (list): Colors representing the current opinion values of the nodes.
    """

    def __init__(self, size):
        self.nodes = [Node(np.random.rand(), i) for i in range(size)]
        self.size = size
        self.node_colors = [node.value for node in self.nodes]

    def make_small_world_network(self, re_wire_prob=0.2, neighbor_range=2):
        """
        Creates a small-world network using initial regular ring topology and then rewiring edges with a given probability.
            re_wire_prob (float): Probability of rewiring each edge.
            neighbor_range (int): Number of neighbors on each side to connect in the initial ring.
        """
        # Creating a regular ring lattice
        for node in self.nodes:
            node.connections = [(node.index + i) % self.size for i in range(-neighbor_range, neighbor_range + 1) if
                                i != 0]

        # Rewiring edges to add small-world characteristic
        for node in self.nodes:
            for i in range(len(node.connections)):
                if random.random() < re_wire_prob:
                    new_connection = random.randint(0, self.size - 1)
                    while new_connection == node.index or new_connection in node.connections:
                        new_connection = random.randint(0, self.size - 1)
                    node.connections[i] = new_connection

    def update_node_colors(self):
        """ Updates the colors of nodes based on their current opinion values. """
        self.node_colors = [node.value for node in self.nodes]

    def mean_opinion(self):
        """ Computes the average opinion value across all nodes in the network. """
        return np.mean([node.value for node in self.nodes])


def update_opinions(network, beta=0.5, threshold=0.5):
    """
    Updates the opinions of two connected nodes based on their difference and the given parameters.
        network (Network): The network containing the nodes.
        beta (float): The convergence parameter, influencing how much nodes adjust their opinions.
        threshold (float): The maximum difference in opinion for which nodes influence each other.
    """
    node = random.choice(network.nodes)
    if node.connections:
        neighbor = random.choice(node.connections)
        neighbor_node = network.nodes[neighbor]
        if abs(node.value - neighbor_node.value) < threshold:
            node.value += beta * (neighbor_node.value - node.value)
            neighbor_node.value += beta * (node.value - neighbor_node.value)


def plot_network(network, ax, positions):
    """
    Plots the network on the given Axes object using specified node positions.

    Args:
        network (Network): The network to plot.
        ax (Axes): The matplotlib Axes object to draw on.
        positions (ndarray): An array of positions for the nodes.

    Returns:
        scatter (PathCollection): The scatter plot object containing the nodes.
    """
    ax.clear()
    norm = plt.Normalize(0, 1)  # Normalize the color range
    network.update_node_colors()  # Update colors based on current node opinions
    node_sizes = [100 for node in network.nodes]  # Set uniform size for all nodes
    scatter = ax.scatter(positions[:, 0], positions[:, 1], c=network.node_colors, cmap='viridis', edgecolor='k',
                         norm=norm, s=node_sizes)
    for node in network.nodes:
        for neighbor in node.connections:
            ax.plot([positions[node.index, 0], positions[neighbor, 0]],
                    [positions[node.index, 1], positions[neighbor, 1]], color="black", linestyle='-')

    ax.set_aspect('equal')
    ax.axis('off')
    return scatter


def update(frame, network, beta, threshold, positions, ax, mean_opinions):
    """
    Function called by FuncAnimation to update the plot for each frame.
        frame (int): The current frame index (also used as the iteration count).
        network (Network): The network being simulated.
        beta (float): The convergence parameter.
        threshold (float): The influence threshold.
        positions (ndarray): The positions of nodes.
        ax (Axes): The matplotlib Axes object to plot on.
        mean_opinions (list): List to record the mean opinion after each frame.
    """
    update_opinions(network, beta, threshold)
    network.update_node_colors()  # Update node colors after opinion change
    scatter = plot_network(network, ax, positions)

    ax.set_title(f'Iteration: {frame + 1}')  # Update the title with the current iteration number

    # Record the mean opinion after this iteration
    mean_opinions.append(network.mean_opinion())

    return scatter


def main():
    parser = argparse.ArgumentParser(description='Run the Deffuant model on a small-world network.')
    parser.add_argument('-defuant', action='store_true', help='Flag to run the Deffuant model')
    parser.add_argument('-use_network', type=int, default=10, help='Number of nodes in the network')
    parser.add_argument('-beta', type=float, default=0.5, help='Convergence parameter')
    parser.add_argument('-threshold', type=float, default=0.5, help='Threshold for influence')
    parser.add_argument('-re_wire_prob', type=float, default=0.2, help='Probability of rewiring in the small-world network')
    parser.add_argument('-steps', type=int, default=100, help='Number of steps to run the simulation')
    args = parser.parse_args()

    if args.defuant:
        network = Network(size=args.use_network)
        network.make_small_world_network(re_wire_prob=args.re_wire_prob)

        positions = np.array(
            [(np.cos(2 * np.pi * i / args.use_network), np.sin(2 * np.pi * i / args.use_network)) for i in range(args.use_network)])

        fig, ax = plt.subplots()
        plt.colorbar(plot_network(network, ax, positions))  # Display color bar indicating opinion values

        mean_opinions = []  # List to store mean opinions after each iteration

        ani = FuncAnimation(fig, update, frames=np.arange(args.steps),
                            fargs=(network, args.beta, args.threshold, positions, ax, mean_opinions),
                            interval=10, repeat=False)

        plt.show()

        # Plot the mean opinion changes over time
        plt.figure()
        plt.plot(mean_opinions)
        plt.xlabel("Iteration")
        plt.ylabel("Mean Opinion")
        plt.title("Mean Opinion Over Time")
        plt.grid(True)
        plt.show()


if __name__ == "__main__":
    main()



