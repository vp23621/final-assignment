import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import random
import argparse


class Node:

    def __init__(self, value, number, connections=None):
        self.index = number
        self.connections = connections
        self.value = value


class Network:

    def __init__(self, nodes=None):

        if nodes is None:
            self.nodes = []
        else:
            self.nodes = nodes

    def get_mean_degree(self):
        """
        The mean degree is computed as the average number of connections each node has.
        This is done by summing the number of connections for each node and then dividing
        by the total number of nodes.
        """

        # calculates the total degree by summing the number of connections each node has.
        total_degree = sum(len([1 for connected in node.connections if connected]) for node in self.nodes)
        # get mean degree
        mean_degree = total_degree / len(self.nodes)
        return mean_degree

    def get_clustering(self):
        """
        The clustering coefficient for a node measures how close its neighbors are to being
        a complete clique. This function calculates the coefficient for each node and returns
        the average.
        Nodes with less than two connections have a coefficient of 0 because
        there can be no triangles formed with fewer than two connections.
        """

        clustering_coefficients = []

        for node in self.nodes:
            if len(node.connections) < 2:
                # If a node has less than two connections, its clustering coefficient is 0
                clustering_coefficients.append(0)
                continue

            # Calculates the number of possible links between neighbors
            neighbors = [i for i, is_connected in enumerate(node.connections) if is_connected]
            possible_links = len(neighbors) * (len(neighbors) - 1) / 2

            # Avoid division by zero if there are no possible links
            if possible_links == 0:
                clustering_coefficients.append(0)
                continue

            # Calculate the number of direct connections between neighboring nodes
            actual_links = sum(1 for i in range(len(neighbors))
                               for j in range(i + 1, len(neighbors))
                               if self.nodes[neighbors[i]].connections[neighbors[j]])

            # Calculate the clustering coefficient
            clustering_coefficients.append(actual_links / possible_links)

        if len(clustering_coefficients) == 0:
            return 0  # Return 0 if there are no clustering coefficients to average

        mean_clustering = sum(clustering_coefficients) / len(self.nodes)
        return mean_clustering

    def get_path_length(self):
        """
        Utilizes the Floyd-Warshall algorithm to find the shortest path between all pairs of nodes.
        Use a for loop to count all path length and divide it with counted path number to get the average path length.
        If no paths are available (disconnected graph), it returns infinity.
        """
        num_nodes = len(self.nodes)
        # set the range of path length from 0 to positive infinity, in order to use the Floyd-Warshall algorithm.
        path_lengths = [[float('inf') if i != j else 0 for j in range(num_nodes)] for i in range(num_nodes)]

        # Set the distance for the direct connections
        for node in self.nodes:
            for neighbor_index, connected in enumerate(node.connections):
                if connected:
                    path_lengths[node.index][neighbor_index] = 1

        for k in range(num_nodes):
            for i in range(num_nodes):
                for j in range(num_nodes):
                    if path_lengths[i][j] > path_lengths[i][k] + path_lengths[k][j]:
                        path_lengths[i][j] = path_lengths[i][k] + path_lengths[k][j]

        # Compute the mean path length by considering all paths
        total_path_length = 0
        count_paths = 0
        for i in range(num_nodes):
            for j in range(num_nodes):
                if i != j and path_lengths[i][j] != float('inf'):
                    total_path_length += path_lengths[i][j]
                    count_paths += 1

        if count_paths == 0:
            return float('inf')  # Return infinity if no paths are available to average
        mean_path_length = total_path_length / count_paths

        # Round the mean path length to 15 decimal places
        return round(mean_path_length, 15)

    def make_random_network(self, N, connection_probability=0.5):
            '''
            This function makes a *random* network of size N.
            Each node is connected to each other node with probability p
            '''

            self.nodes = []
            for node_number in range(N):
                value = np.random.random()
                connections = [0 for _ in range(N)]
                self.nodes.append(Node(value, node_number, connections))

            for (index, node) in enumerate(self.nodes):
                for neighbour_index in range(index + 1, N):
                    if np.random.random() < connection_probability:
                        node.connections[neighbour_index] = 1
                        self.nodes[neighbour_index].connections[index] = 1

    def make_ring_network(self, N, neighbour_range=1):
            '''
            This function makes a ring network of size N.
            Each node is connected to neighbour with initial range of 1
            '''

            # If there are no nodes to add, exit the function
            if N == 0:
                return
            # Create a list of N nodes, each with a random value
            self.nodes = [Node(np.random.random(), i, [0] * N) for i in range(N)]
            # Establish connections in a ring, within the specified neighbour range
            for (index, node) in enumerate(self.nodes):
                for j in range(1, neighbour_range + 1):
                    # Find the left neighbour considering wrap-around
                    left = (index - j) % N
                    # Find the right neighbour considering wrap-around
                    right = (index + j) % N
                    # Connect current node to the left neighbour
                    node.connections[left] = 1
                    # Connect current node to the right neighbour
                    node.connections[right] = 1
                    # Ensure bidirectional connection (left to current)
                    self.nodes[left].connections[index] = 1
                    # Ensure bidirectional connection (right to current)
                    self.nodes[right].connections[index] = 1

    def make_small_world_network(self, N, re_wire_prob=0.2):
            '''
            This function makes a small world of size N.
            Each node's rewire probability is compared with the random probability to determine whether to connect
            '''

            # If there are no nodes to add, exit the function
            if N == 0:
                return
            # First create a ring network with a neighbour range of 2
            self.make_ring_network(N, neighbour_range=2)
            # Consider each possible pair of nodes in the network
            for (index, node) in enumerate(self.nodes):
                for neighbour_index in range(N):
                    # Check if there is no existing connection and they are not the same node
                    if neighbour_index != index and node.connections[neighbour_index] == 0:
                        # Randomly decide based on re_wire_prob whether to rewire this connection
                        if np.random.random() < re_wire_prob:
                            # Choose a random node to rewire to
                            rewire_to_index = np.random.randint(0, N)
                            # Establish the new connection
                            node.connections[rewire_to_index] = 1
                            # Ensure the connection is bidirectional
                            self.nodes[rewire_to_index].connections[index] = 1

    def plot(self):

            fig = plt.figure()
            ax = fig.add_subplot(111)
            ax.set_axis_off()

            num_nodes = len(self.nodes)
            network_radius = num_nodes * 10
            ax.set_xlim([-1.1 * network_radius, 1.1 * network_radius])
            ax.set_ylim([-1.1 * network_radius, 1.1 * network_radius])

            for (i, node) in enumerate(self.nodes):
                node_angle = i * 2 * np.pi / num_nodes
                node_x = network_radius * np.cos(node_angle)
                node_y = network_radius * np.sin(node_angle)

                circle = plt.Circle((node_x, node_y), 0.3 * num_nodes, color=cm.hot(node.value))
                ax.add_patch(circle)

                for neighbour_index in range(i + 1, num_nodes):
                    if node.connections[neighbour_index]:
                        neighbour_angle = neighbour_index * 2 * np.pi / num_nodes
                        neighbour_x = network_radius * np.cos(neighbour_angle)
                        neighbour_y = network_radius * np.sin(neighbour_angle)

                        ax.plot((node_x, neighbour_x), (node_y, neighbour_y), color='black')


def test_networks():
    # Ring network
    nodes = []
    num_nodes = 10
    for node_number in range(num_nodes):
        connections = [0 for val in range(num_nodes)]
        connections[(node_number - 1) % num_nodes] = 1
        connections[(node_number + 1) % num_nodes] = 1
        new_node = Node(0, node_number, connections=connections)
        nodes.append(new_node)
    network = Network(nodes)

    print("Testing ring network")
    assert (network.get_mean_degree() == 2), network.get_mean_degree()
    assert (network.get_clustering() == 0), network.get_clustering()
    assert (network.get_path_length() == 2.777777777777778), network.get_path_length()

    nodes = []
    num_nodes = 10
    for node_number in range(num_nodes):
        connections = [0 for val in range(num_nodes)]
        connections[(node_number + 1) % num_nodes] = 1
        new_node = Node(0, node_number, connections=connections)
        nodes.append(new_node)
    network = Network(nodes)

    print("Testing one-sided network")
    assert (network.get_mean_degree() == 1), network.get_mean_degree()
    assert (network.get_clustering() == 0), network.get_clustering()
    assert (network.get_path_length() == 5), network.get_path_length()

    nodes = []
    num_nodes = 10
    for node_number in range(num_nodes):
        connections = [1 for val in range(num_nodes)]
        connections[node_number] = 0
        new_node = Node(0, node_number, connections=connections)
        nodes.append(new_node)
    network = Network(nodes)

    print("Testing fully connected network")
    assert (network.get_mean_degree() == num_nodes - 1), network.get_mean_degree()
    assert (network.get_clustering() == 1), network.get_clustering()
    assert (network.get_path_length() == 1), network.get_path_length()

    print("All tests passed")


'''
==============================================================================================================
This section contains code for the Ising Model - task 1 in the assignment
==============================================================================================================
'''


def calculate_agreement(population, row, col, external=0.0):

    n_rows, n_cols = population.shape
    # Current cell's opinion
    cell_opinion = population[row, col]

    # Sum opinions of the neighbors
    # np.roll shifts the array and wraps around the boundary, effectively considering periodic boundaries
    neighbor_opinions = (
            population[(row - 1) % n_rows, col] +  # Up
            population[(row + 1) % n_rows, col] +  # Down
            population[row, (col - 1) % n_cols] +  # Left
            population[row, (col + 1) % n_cols]  # Right
    )

    # Calculate the agreement with external influence taken into account
    agreement = (neighbor_opinions + external) * cell_opinion

    return agreement


def ising_step(population, external=0.0, alpha=1.0):
    '''
    This function will perform a single update of the Ising model
    Inputs: population (numpy array)
    external (float) - optional - the magnitude of any external "pull" on opinion
    '''
    n_rows, n_cols = population.shape
    row = np.random.randint(0, n_rows)
    col = np.random.randint(0, n_cols)
    agreement = calculate_agreement(population, row, col, external)
    p_flip = np.exp(-agreement / alpha) if agreement > 0 else 1
    if np.random.random() < p_flip:
        population[row, col] *= -1


def plot_ising(im, population):
    '''
    This function will display a plot of the Ising model
    '''
    new_im = np.array([[255 if val == -1 else 1 for val in rows] for rows in population]).astype(np.int8)
    im.set_data(new_im)
    # Pause to update the image
    plt.pause(0.1)


def test_ising():
    '''
    This function will test the calculate_agreement function in the Ising model
    '''


print("Testing ising model calculations")
population = -np.ones((3, 3))
assert (calculate_agreement(population, 1, 1) == 4), "Test 1"

population[1, 1] = 1.
assert (calculate_agreement(population, 1, 1) == -4), "Test 2"

population[0, 1] = 1.
assert (calculate_agreement(population, 1, 1) == -2), "Test 3"

population[1, 0] = 1.
assert (calculate_agreement(population, 1, 1) == 0), "Test 4"

population[2, 1] = 1.
assert (calculate_agreement(population, 1, 1) == 2), "Test 5"

population[1, 2] = 1.
assert (calculate_agreement(population, 1, 1) == 4), "Test 6"

"Testing external pull"
population = -np.ones((3, 3))
assert (calculate_agreement(population, 1, 1, 1) == 3), "Test 7"
assert (calculate_agreement(population, 1, 1, -1) == 5), "Test 8"
assert (calculate_agreement(population, 1, 1, 10) == -6), "Test 9"
assert (calculate_agreement(population, 1, 1, -10) == 14), "Test 10"

print("Tests passed")


def ising_main(population, alpha=None, external=0.0):
    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.set_axis_off()
    im = ax.imshow(population, interpolation='none', cmap='RdPu_r')

    # Iterating an update 100 times
    for frame in range(100):
        # Iterating single steps 1000 times to form an update
        for step in range(1000):
            ising_step(population, external, alpha)
        print('Step:', frame, end='\r')
        plot_ising(im, population)

    plt.show()


'''
==============================================================================================================
This section contains code for the Defuant Model - task 2 in the assignment
==============================================================================================================
'''


def initilize(num_people):
    # Generate a ramdom opinion for each person
    return np.random.rand(num_people)


def update(opinion, beta, threshold, num_iterations):
    """
    This function update the opinion if it satisfies and record the every opinion with the iteration

    parameter:
            opinion(array of float): the initial opinions of people
            beta(int): The coupling parameter
            num_iteration(int): the number of iteration
            threshold(int): The threshold parameter
    """
    # Create a list for the opinion value for each time iteration
    opinion_over_time = []
    for j in range(num_iterations):
        # Choose a random person
        i = np.random.randint(len(opinion))
        # Ensure all the neighbour is in bounds, it's a circular boundary conditions.
        if i == 0:
            neighbour = random.choice([i + 1, len(opinion) - 1])
        elif i == (len(opinion) - 1):
            neighbour = random.choice([i - 1, 0])
        else:
            # Select random neighbour except for the first and last one
            neighbour = (i + random.choice([-1, 1]))
            # Calculate the difference of their opinion
        difference = opinion[i] - opinion[neighbour]

        if abs(difference) < threshold:
            # Update the opinion if they are eligible
            opinion[i] += (beta * (opinion[neighbour] - opinion[i]))
            opinion[neighbour] += (beta * (opinion[i] - opinion[neighbour]))
        # put all the opinion in a list
        opinion_over_time.append(opinion.copy())
    return opinion_over_time


def plot_opinion(opinion_over_time, num_iterations, beta, threshold):
    """
    This function takes four numbers as input and return the two graphs.
    (hist and the iteration for opinion)

    parameter:
            opinion_over_time: opinion for each person over the time
            beta(int): The coupling parameter
            num_iteration(int): the number of iteration
            threshold(int): The threshold parameter
    """
    fig = plt.figure()
    ax1 = fig.add_subplot(1, 2, 1)
    # Generate a histogram
    ax1.hist(opinion_over_time[-1], bins=10)
    # Set x and y label
    ax1.set_xlabel('Opinion')
    ax1.set_ylabel('Number')
    # Set x_axis from 0 to 1
    x_ticks = np.arange(0, 1.1, 0.2)
    ax1.set_xticks(x_ticks)
    ax2 = fig.add_subplot(1, 2, 2)
    # Generate the second graph
    ax2.plot(range(num_iterations), opinion_over_time, 'ro')
    # Set x and y label
    ax2.set_ylabel('Opinion')
    ax2.set_xlabel('iteration')
    # Set the headline
    fig.suptitle(f'Coupling:{beta},Threshold:{threshold}')
    plt.tight_layout()
    plt.show()


def defuant_main(beta, threshold):
    """
    main function to run the model
    parameter:
            beta: float
            threshold: float
    """
    num_people = 100
    num_iterations = 10000
    opinion_over_time = update(initilize(num_people), beta, threshold, num_iterations)
    plot_opinion(opinion_over_time, num_iterations, beta, threshold)


def test_defuant():
    """
    test the function with different parameters
    """
    defuant_main(0.5, 0.5)
    defuant_main(0.1, 0.5)
    defuant_main(0.5, 0.1)
    defuant_main(0.1, 0.2)


'''
==============================================================================================================
This section contains code for the main function- you should write some code for handling flags here
==============================================================================================================
'''

def main():
    parser = argparse.ArgumentParser(description='Command line interface for various models and tests.')
    parser.add_argument('-ising_model', action='store_true', help='Run the Ising model simulation')
    parser.add_argument('-external', type=float, default=0.0, help='External influence on opinions')
    parser.add_argument('-alpha', type=float, default=1.0, help='Tolerance level of society')
    parser.add_argument('-test_ising', action='store_true', help='Run the test functions for Ising model')
    parser.add_argument("-beta", type=float, default=0.2, help="Beta value for Defuant model. Default: 0.2")
    parser.add_argument("-threshold", type=float, default=0.2, help="Threshold value for Defuant model. Default: 0.2")
    parser.add_argument("-defuant", action="store_true", help="Run the Defuant model.")
    parser.add_argument("-test_defuant", action="store_true", help="Run the test functions for Defuant model.")
    parser.add_argument("-ring_network", action='store_true', help="Create a ring network")
    parser.add_argument("-small_world", action='store_true', help="Create a small world network")
    parser.add_argument("-re_wire", type=float, default=0.2, help="Reconnection probability of small world network")
    parser.add_argument("node_number", type=int, default=10, nargs='?', help="Number of nodes in network")

    args = parser.parse_args()

    if args.test_ising:
        test_ising()
    if args.ising_model:
        size = (100, 100)
        population = np.random.choice([-1, 1], size=size)
        ising_main(population, alpha=args.alpha, external=args.external)

    if args.defuant:
        defuant_main(args.beta, args.threshold)
    if args.test_defuant:
        test_defuant()

    network = Network()

    if args.ring_network:
        network.make_ring_network(N=args.node_number, neighbour_range=1)
        network.plot()

    elif args.small_world:
        network.make_small_world_network(N=args.node_number, re_wire_prob=args.re_wire)
        network.plot()


if __name__ == "__main__":
    main()
    test_networks()
