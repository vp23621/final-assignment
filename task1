import numpy as np
import matplotlib.pyplot as plt
import argparse


def calculate_agreement(population, row, col, external=0.0):
    '''
    	This function should return the extent to which a cell agrees with its neighbours.
    	Inputs: population (numpy array)
    			row (int)
    			col (int)
    			external (float)
    	Returns:
    			change_in_agreement (float)
    '''
    n_rows, n_cols = population.shape
    # Current cell's opinion
    cell_opinion = population[row, col]

    # Sum opinions of the neighbors
    # np.roll shifts the array and wraps around the boundary, effectively considering periodic boundaries
    neighbor_opinions = (
            population[(row - 1) % n_rows, col] +  # Up
            population[(row + 1) % n_rows, col] +  # Down
            population[row, (col - 1) % n_cols] +  # Left
            population[row, (col + 1) % n_cols]  # Right
    )

    # Calculate the agreement with external influence taken into account
    agreement = (neighbor_opinions + external) * cell_opinion

    return agreement


def ising_step(population, external=0.0, alpha=1.0):
    '''
    	This function will perform a single update of the Ising model
    	Inputs: population (numpy array)
    			external (float) - optional - the magnitude of any external "pull" on opinion
    '''
    n_rows, n_cols = population.shape
    row = np.random.randint(0, n_rows)
    col = np.random.randint(0, n_cols)
    agreement = calculate_agreement(population, row, col, external)
    p_flip = np.exp(-agreement / alpha) if agreement > 0 else 1
    if np.random.random() < p_flip:
        population[row, col] *= -1

def plot_ising(im, population):
    '''
    This function will display a plot of the Ising model
    '''
    new_im = np.array([[255 if val == -1 else 1 for val in rows] for rows in population]).astype(np.int8)
    im.set_data(new_im)
    # Pause to update the image
    plt.pause(0.1)

def test_ising():
    """
    Testing the calculate_agreement function of the Ising model
    """
    print("Testing ising model calculations")
    population = -np.ones((3, 3))
    assert(calculate_agreement(population,1,1)==4), "Test 1"

    population[1, 1] = 1.
    assert(calculate_agreement(population,1,1)==-4), "Test 2"

    population[0, 1] = 1.
    assert(calculate_agreement(population,1,1)==-2), "Test 3"

    population[1, 0] = 1.
    assert(calculate_agreement(population,1,1)==0), "Test 4"

    population[2, 1] = 1.
    assert(calculate_agreement(population,1,1)==2), "Test 5"

    population[1, 2] = 1.
    assert(calculate_agreement(population,1,1)==4), "Test 6"

    # Testing the impact of external opinions
    "Testing external pull"
    population = -np.ones((3, 3))
    assert(calculate_agreement(population, 1, 1, 1)==3), "Test 7"
    assert(calculate_agreement(population, 1, 1, -1)==5), "Test 8"
    assert (calculate_agreement(population, 1, 1, 10) ==-6), "Test 9"
    assert (calculate_agreement(population, 1, 1, -10) ==14), "Test 10"

    print("Tests passed")

def ising_main(population, alpha=None, external=0.0):
    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.set_axis_off()
    im = ax.imshow(population, interpolation='none', cmap='RdPu_r')

    # Iterating an update 100 times
    for frame in range(100):
        # Iterating single steps 1000 times to form an update
        for step in range(1000):
            ising_step(population, external, alpha)
        print('Step:', frame, end='\r')
        plot_ising(im, population)

    plt.show()
def main():
    parser = argparse.ArgumentParser(description='Run the Ising model simulation.')
    parser.add_argument('-ising_model', action='store_true', help='Run the Ising model simulation')
    parser.add_argument('-external', type=float, default=0.0, help='External influence on opinions')
    parser.add_argument('-alpha', type=float, default=1.0, help='Tolerance level of society')
    parser.add_argument('-test_ising', action='store_true',help='Run the test functions')
    args = parser.parse_args()
    if args.test_ising:
        test_ising()
    if args.ising_model:
        size = (100, 100)  # Example size, can be changed as needed
        population = np.random.choice([-1, 1], size=size)
        ising_main(population, alpha=args.alpha, external=args.external)


if __name__ == "__main__":
    main()

