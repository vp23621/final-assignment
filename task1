import numpy as np
import matplotlib.pyplot as plt
import argparse


def calculate_agreement(population, row, col, external=0.0):
    '''
    This function calculates the extent to which a cell in the population grid agrees with its neighbors,
    considering an optional external influence.
    '''
    n_rows, n_cols = population.shape  # To get dimensions of the population grid
    cell_opinion = population[row, col]  # Opinion of the current cell

    # Summing up the opinions of the direct neighbors using periodic boundary conditions
    #The % operator here implements index cycling, so that even marginal cells can find their ‘ring’ neighbours.
    neighbor_opinions = (
        population[(row - 1) % n_rows, col] +  # Up neighbor
        population[(row + 1) % n_rows, col] +  # Down neighbor
        population[row, (col - 1) % n_cols] +  # Left neighbor
        population[row, (col + 1) % n_cols]    # Right neighbor
    )

    # Compute agreement considering external influence
    agreement = (neighbor_opinions + external) * cell_opinion

    return agreement


def ising_step(population, external=0.0, alpha=1.0):
    '''
    Performs a single update step in the Ising model simulation,
    deciding whether a selected cell should flip its state.
    '''
    n_rows, n_cols = population.shape
    row = np.random.randint(0, n_rows)  # Random row
    col = np.random.randint(0, n_cols)  # Random column
    agreement = calculate_agreement(population, row, col, external)  # Calculate agreement
    p_flip = np.exp(-agreement / alpha) if agreement > 0 else 1  # Calculate probability of flipping
    if np.random.random() < p_flip:
        population[row, col] *= -1  # Flip the cell's state


def plot_ising(im, population):
    '''
    Updates the plot for the Ising model simulation with the current state of the population grid.
    '''
    new_im = np.array([[255 if val == -1 else 1 for val in rows] for rows in population]).astype(np.int8)
    im.set_data(new_im)
    plt.pause(0.1)  # Pause to update the image visually


def test_ising():
    """
    Runs several assertions to test the `calculate_agreement` function, ensuring its correctness.
    """
    print("Testing ising model calculations")
    population = -np.ones((3, 3))
    # Several tests with different configurations and external influences
    assert(calculate_agreement(population,1,1)==4), "Test 1"
    population[1, 1] = 1.
    assert(calculate_agreement(population,1,1)==-4), "Test 2"
    population[0, 1] = 1.
    assert(calculate_agreement(population,1,1)==-2), "Test 3"
    population[1, 0] = 1.
    assert(calculate_agreement(population,1,1)==0), "Test 4"
    population[2, 1] = 1.
    assert(calculate_agreement(population,1,1)==2), "Test 5"
    population[1, 2] = 1.
    assert(calculate_agreement(population,1,1)==4), "Test 6"
    population = -np.ones((3, 3))
    assert(calculate_agreement(population, 1, 1, 1)==3), "Test 7"
    assert(calculate_agreement(population, 1, 1, -1)==5), "Test 8"
    assert (calculate_agreement(population, 1, 1, 10) ==-6), "Test 9"
    assert (calculate_agreement(population, 1, 1, -10) ==14), "Test 10"
    print("Tests passed")


def ising_main(population, alpha=None, external=0.0):
    '''
    Main function to run the Ising model simulation over a number of steps, updating the visualization.
    '''
    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.set_axis_off()
    im = ax.imshow(population, interpolation='none', cmap='RdPu_r')

    for frame in range(100):  # Number of updates
        for step in range(1000):  # Number of iterations per update
            ising_step(population, external, alpha)
        print('Step:', frame, end='\r')
        plot_ising(im, population)

    plt.show()


def main():
    '''
    Main function to parse arguments and  initiate the simulation or testing based
    on the user's input.
    '''
    parser = argparse.ArgumentParser(description='Run the Ising model simulation.')
    parser.add_argument('-ising_model', action='store_true', help='Run the Ising model simulation')
    parser.add_argument('-external', type=float, default=0.0, help='External influence on opinions')
    parser.add_argument('-alpha', type=float, default=1.0, help='Tolerance level of society')
    parser.add_argument('-test_ising', action='store_true',help='Run the test functions')
    args = parser.parse_args()

    if args.test_ising:
        test_ising()
    if args.ising_model:
        size = (100, 100)
        population = np.random.choice([-1, 1], size=size)
        ising_main(population, alpha=args.alpha, external=args.external)


if __name__ == "__main__":
    main()

